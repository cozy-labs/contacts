// Generated by CoffeeScript 1.8.0
var Config, Contact, Task, multiparty, path;

Contact = require('../models/contact');

Config = require('../models/config');

Task = require('../models/tasky');

path = require('path');

multiparty = require('multiparty');

module.exports = {
  fetch: function(req, res, next, id) {
    return Contact.find(id, function(err, contact) {
      if (err) {
        return res.error(500, 'An error occured', err);
      }
      if (!contact) {
        return res.error(404, 'Contact not found');
      }
      req.contact = contact;
      return next();
    });
  },
  list: function(req, res) {
    return Contact.request('all', function(err, contacts) {
      if (err) {
        return res.error(500, 'An error occured', err);
      }
      return res.send(contacts);
    });
  },
  create: function(req, res) {
    var create, model, toCreate;
    console.log(req.body);
    model = req.body.contact ? JSON.parse(req.body.contact) : req.body;
    toCreate = new Contact(model);
    create = function() {
      return Contact.create(toCreate, function(err, contact) {
        if (err) {
          return next(err);
        } else {
          return res.send(contact, 201);
        }
      });
    };
    if (model["import"]) {
      return Config.getInstance(function(err, config) {
        var dp, name, _i, _len, _ref;
        name = '';
        if ((toCreate.fn != null) && toCreate.fn.length > 0) {
          name = toCreate.fn;
        } else if (toCreate.n && toCreate.n.length > 0) {
          name = toCreate.n.split(';').join(' ').trim();
        } else {
          _ref = toCreate.datapoints;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            dp = _ref[_i];
            if (dp.name === 'email') {
              name = dp.value;
            }
          }
        }
        return Contact.request('byName', {
          key: name
        }, function(err, contacts) {
          if (contacts.length === 0) {
            return create();
          } else {
            return res.send(contacts[0], 201);
          }
        });
      });
    } else {
      return create();
    }
  },
  read: function(req, res) {
    return res.send(req.contact);
  },
  update: function(req, res) {
    var model;
    model = req.body.contact ? JSON.parse(req.body.contact) : req.body;
    return req.contact.updateAttributes(model, function(err) {
      if (err) {
        return res.error(500, "Update failed.", err);
      } else {
        return res.send(req.contact, 201);
      }
    });
  },
  updatePicture: function(req, res, next) {
    var form;
    form = new multiparty.Form();
    return form.parse(req, function(err, fields, files) {
      var file;
      if (err) {
        return next(err);
      } else if ((files != null) && (files.picture != null) && files.picture.length > 0) {
        file = files.picture[0];
        return req.contact.savePicture(file.path, function(err) {
          if (err) {
            return next(err);
          } else {
            return res.send(req.contact, 201);
          }
        });
      } else {
        return next(new Error('Can\'t change picture, no file is attached.'));
      }
    });
  },
  "delete": function(req, res) {
    return req.contact.destroy(function(err) {
      if (err) {
        return res.error(500, "Deletion failed.", err);
      }
      return res.send("Deletion succeded.", 204);
    });
  },
  picture: function(req, res, next) {
    var stream, _ref;
    if ((_ref = req.contact._attachments) != null ? _ref.picture : void 0) {
      stream = req.contact.getFile('picture', function(err) {
        if (err) {
          return next(err);
        }
      });
      return stream.pipe(res);
    } else {
      return res.sendfile(path.resolve(__dirname, '../assets/defaultpicture.png'));
    }
  },
  vCard: function(req, res, next) {
    return Config.getInstance(function(err, config) {
      return Contact.request('all', function(err, contacts) {
        var contact, date, out, _i, _len;
        if (err) {
          next(err);
        }
        out = "";
        for (_i = 0, _len = contacts.length; _i < _len; _i++) {
          contact = contacts[_i];
          out += contact.toVCF(config);
        }
        date = new Date();
        date = "" + (date.getYear()) + "-" + (date.getMonth()) + "-" + (date.getDate());
        res.attachment("cozy-contacts-" + date + ".vcf");
        res.set('Content-Type', 'text/x-vcard');
        return res.send(out);
      });
    });
  },
  vCardContact: function(req, res, next) {
    return Config.getInstance(function(err, config) {
      return Contact.request('all', {
        key: req.params.contactid
      }, function(err, contacts) {
        var contact, date, out, _i, _len;
        if (err) {
          next(err);
        }
        out = "";
        for (_i = 0, _len = contacts.length; _i < _len; _i++) {
          contact = contacts[_i];
          out += contact.toVCF(config);
        }
        date = new Date();
        date = "" + (date.getYear()) + "-" + (date.getMonth()) + "-" + (date.getDate());
        res.attachment("" + req.params.fn + ".vcf");
        res.set('Content-Type', 'text/x-vcard');
        return res.send(out);
      });
    });
  }
};
