// Generated by CoffeeScript 1.7.1
var ContactLog, americano, async;

americano = require('americano-cozy-pouchdb');

async = require('async');

module.exports = ContactLog = americano.getModel('ContactLog', {
  type: String,
  direction: {
    type: String,
    "default": 'NA'
  },
  timestamp: String,
  remote: Object,
  content: function(x) {
    return x;
  },
  wrong: {
    type: Boolean,
    "default": false
  }
});

ContactLog.byRemote = function(keys, callback) {
  return ContactLog.request('byRemote', {
    keys: keys
  }, callback);
};

ContactLog.bySnippet = function(keys, callback) {
  return ContactLog.rawRequest('bySnippet', {
    keys: keys
  }, function(err, items) {
    var indexed, item, _i, _len;
    if (err) {
      return callback(err);
    }
    indexed = {};
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      indexed[item.key] = item.value;
    }
    return callback(null, indexed);
  });
};

ContactLog.normalizeNumber = function(number) {
  number = number.replace(new RegExp(' ', 'g'), '');
  number = number.replace(new RegExp('\\+', 'g'), '');
  number = number.replace(new RegExp('\\(0\\)', 'g'), '');
  number = number.replace(new RegExp('\\(', 'g'), '');
  number = number.replace(new RegExp('\\)', 'g'), '');
  number = number.replace(new RegExp('-', 'g'), '');
  return number;
};

ContactLog.makeSnippet = function(log) {
  var remote, _ref, _ref1, _ref2;
  if (log.snippet) {
    return log.snippet;
  } else {
    remote = ((_ref = log.remote) != null ? _ref.id : void 0) || ((_ref1 = log.remote) != null ? _ref1.tel : void 0) || ((_ref2 = log.remote) != null ? _ref2.mail : void 0);
    return "" + log.timestamp + " : " + log.type + " " + log.direction + " " + remote;
  }
};

ContactLog.merge = function(newLogs, callback) {
  var snippets;
  snippets = newLogs.map(ContactLog.makeSnippet);
  return ContactLog.bySnippet(snippets, function(err, oldlogs) {
    if (err) {
      return callback(err);
    }
    return async.eachSeries(newLogs, function(log, cb) {
      var snippet;
      snippet = ContactLog.makeSnippet(log);
      if (oldlogs[snippet] != null) {
        return cb(null);
      } else {
        return ContactLog.create(log, cb);
      }
    }, callback);
  });
};
